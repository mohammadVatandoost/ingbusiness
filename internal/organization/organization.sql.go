// Code generated by sqlc. DO NOT EDIT.
// source: organization.sql

package organization

import (
	"context"
)

const addOrganization = `-- name: AddOrganization :one
INSERT INTO organization (
    name,
    owner_id
) VALUES (
  $1,
  $2
)
RETURNING id, name, owner_id, create_time, update_time
`

type AddOrganizationParams struct {
	Name    string
	OwnerID int32
}

func (q *Queries) AddOrganization(ctx context.Context, arg AddOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, addOrganization, arg.Name, arg.OwnerID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :one
DELETE FROM organization
WHERE id = $1
RETURNING id, name, owner_id, create_time, update_time
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int32) (Organization, error) {
	row := q.db.QueryRowContext(ctx, deleteOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, owner_id, create_time, update_time FROM organization WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id int32) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getOrganizationByOwnerID = `-- name: GetOrganizationByOwnerID :many
SELECT id, name, owner_id, create_time, update_time FROM organization WHERE owner_id = $1
`

func (q *Queries) GetOrganizationByOwnerID(ctx context.Context, ownerID int32) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizations = `-- name: GetOrganizations :many
SELECT id, name, owner_id, create_time, update_time FROM organization
`

func (q *Queries) GetOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organization SET name = $2
WHERE id = $1
RETURNING id, name, owner_id, create_time, update_time
`

type UpdateOrganizationParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}
