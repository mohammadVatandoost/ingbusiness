package rest

import (
	"context"
	"github.com/gin-gonic/gin"
	savedmessagesV1 "github.com/mohammadVatandoost/ingbusiness/api/services/savedmessages/v1"
	"github.com/mohammadVatandoost/ingbusiness/pkg/jwt"
	"net/http"
	"time"
)

// frequent message is not just saved messages. For example, it can be generated by AI too.

func (s *Server) SaveMessage(c *gin.Context) {
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(s.conf.TimeOut)*time.Second)
	defer cancel()

	var data savedmessagesV1.SavedMessage

	err := c.BindJSON(&data)
	if err != nil {
		s.logger.Errorf("can not get json data for AddOrganization, err: %s \n", err.Error())
		ErrorResponse(c, err.Error())
		return
	}

	userInfo, _ := c.Get(UserContextKey)
	//ToDo: upload image to storage
	sm, err := s.frequentMessagesService.Add(ctx, &data, userInfo.(jwt.Message).UserID)
	if err != nil {
		s.logger.Errorf("can not SaveMessage, OrganizationID:%v, MessageContent:%v,  err: %s \n",
			data.OrganizationID, data.MessageContent, err.Error())
		ErrorResponse(c, err.Error())
		return
	}

	APIResponse(c, http.StatusOK, nil,
		savedmessagesV1.SavedMessage{
			Id:             sm.ID,
			MessageContent: sm.Message,
			OrganizationID: sm.OrganizationID,
			Image:          sm.Image,
		},
		nil,
		"", nil)
}

func (s *Server) GetSavedMessages(c *gin.Context) {
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(s.conf.TimeOut)*time.Second)
	defer cancel()

	var data savedmessagesV1.SavedMessage

	err := c.BindJSON(&data)
	if err != nil {
		s.logger.Errorf("can not get json data for AddOrganization, err: %s \n", err.Error())
		ErrorResponse(c, err.Error())
		return
	}

	sms, err := s.frequentMessagesService.GetSavedMessageByOrganizationID(ctx, data.OrganizationID)
	if err != nil {
		s.logger.Errorf("can not GetSavedMessageByOrganizationID, OrganizationID:%v,  err: %s \n",
			data.OrganizationID, err.Error())
		ErrorResponse(c, err.Error())
		return
	}

	var res []savedmessagesV1.SavedMessage
	for _, sm := range sms {
		res = append(res, savedmessagesV1.SavedMessage{
			Id:             sm.ID,
			Image:          sm.Image,
			OrganizationID: sm.OrganizationID,
			MessageContent: sm.Message,
			WriterID:       sm.WriterID,
		})
	}
	APIResponse(c, http.StatusOK, nil,
		res,
		nil,
		"", nil)
}

func (s *Server) DeleteSavedMessage(c *gin.Context) {
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(s.conf.TimeOut)*time.Second)
	defer cancel()

	var data savedmessagesV1.SavedMessage

	err := c.BindJSON(&data)
	if err != nil {
		s.logger.Errorf("can not get json data for DeleteSavedMessage, err: %s \n", err.Error())
		ErrorResponse(c, err.Error())
		return
	}

	err = s.frequentMessagesService.Delete(ctx, &data)
	if err != nil {
		s.logger.Errorf("can not Delete, OrganizationID:%v, messageID:%v, err: %s \n",
			data.OrganizationID, data.Id, err.Error())
		ErrorResponse(c, err.Error())
		return
	}
	APIResponse(c, http.StatusOK, nil, nil, nil, "", nil)
}

func (s *Server) UpdateSavedMessage(c *gin.Context) {
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(s.conf.TimeOut)*time.Second)
	defer cancel()

	var data savedmessagesV1.SavedMessage

	err := c.BindJSON(&data)
	if err != nil {
		s.logger.Errorf("can not get json data for DeleteSavedMessage, err: %s \n", err.Error())
		ErrorResponse(c, err.Error())
		return
	}
	err = s.frequentMessagesService.UpdateSavedMessageMessage(ctx, &data)
	if err != nil {
		s.logger.Errorf("can not UpdateSavedMessageMessage, OrganizationID:%v, messageID:%v, err: %s \n",
			data.OrganizationID, data.Id, err.Error())
		ErrorResponse(c, err.Error())
		return
	}
	APIResponse(c, http.StatusOK, nil, nil, nil, "", nil)
}
