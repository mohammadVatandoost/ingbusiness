// Code generated by sqlc. DO NOT EDIT.
// source: ingaccounts.sql

package ingaccounts

import (
	"context"
	"database/sql"
)

const addIngAccount = `-- name: AddIngAccount :one
INSERT INTO ing_accounts (
  name,
  token,
  user_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, name, token, user_id, create_time, update_time
`

type AddIngAccountParams struct {
	Name   string
	Token  sql.NullString
	UserID int32
}

func (q *Queries) AddIngAccount(ctx context.Context, arg AddIngAccountParams) (IngAccount, error) {
	row := q.db.QueryRowContext(ctx, addIngAccount, arg.Name, arg.Token, arg.UserID)
	var i IngAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteIngAccount = `-- name: DeleteIngAccount :one
DELETE FROM ing_accounts
WHERE id = $1
RETURNING id, name, token, user_id, create_time, update_time
`

func (q *Queries) DeleteIngAccount(ctx context.Context, id int32) (IngAccount, error) {
	row := q.db.QueryRowContext(ctx, deleteIngAccount, id)
	var i IngAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getIngAccount = `-- name: GetIngAccount :one
SELECT id, name, token, user_id, create_time, update_time FROM ing_accounts WHERE id = $1
`

func (q *Queries) GetIngAccount(ctx context.Context, id int32) (IngAccount, error) {
	row := q.db.QueryRowContext(ctx, getIngAccount, id)
	var i IngAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getIngAccountByUserID = `-- name: GetIngAccountByUserID :one
SELECT id, name, token, user_id, create_time, update_time FROM ing_accounts WHERE user_id = $1
`

func (q *Queries) GetIngAccountByUserID(ctx context.Context, userID int32) (IngAccount, error) {
	row := q.db.QueryRowContext(ctx, getIngAccountByUserID, userID)
	var i IngAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getIngAccounts = `-- name: GetIngAccounts :many
SELECT id, name, token, user_id, create_time, update_time FROM ing_accounts
`

func (q *Queries) GetIngAccounts(ctx context.Context) ([]IngAccount, error) {
	rows, err := q.db.QueryContext(ctx, getIngAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IngAccount
	for rows.Next() {
		var i IngAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Token,
			&i.UserID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngAccountToken = `-- name: UpdateIngAccountToken :one
UPDATE ing_accounts SET token = $2
WHERE id = $1
RETURNING id, name, token, user_id, create_time, update_time
`

type UpdateIngAccountTokenParams struct {
	ID    int32
	Token sql.NullString
}

func (q *Queries) UpdateIngAccountToken(ctx context.Context, arg UpdateIngAccountTokenParams) (IngAccount, error) {
	row := q.db.QueryRowContext(ctx, updateIngAccountToken, arg.ID, arg.Token)
	var i IngAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.UserID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}
