// Code generated by sqlc. DO NOT EDIT.
// source: access.sql

package access

import (
	"context"
)

const addAccess = `-- name: AddAccess :one
INSERT INTO access (
    organization_id,
    organization_name,
    user_id,
    role_id
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, organization_id, organization_name, user_id, role_id, create_time, update_time
`

type AddAccessParams struct {
	OrganizationID   int32
	OrganizationName string
	UserID           int32
	RoleID           int32
}

func (q *Queries) AddAccess(ctx context.Context, arg AddAccessParams) (Access, error) {
	row := q.db.QueryRowContext(ctx, addAccess,
		arg.OrganizationID,
		arg.OrganizationName,
		arg.UserID,
		arg.RoleID,
	)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OrganizationName,
		&i.UserID,
		&i.RoleID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteAccess = `-- name: DeleteAccess :one
DELETE FROM access
WHERE id = $1
RETURNING id, organization_id, organization_name, user_id, role_id, create_time, update_time
`

func (q *Queries) DeleteAccess(ctx context.Context, id int32) (Access, error) {
	row := q.db.QueryRowContext(ctx, deleteAccess, id)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OrganizationName,
		&i.UserID,
		&i.RoleID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteAccessByOrganizationID = `-- name: DeleteAccessByOrganizationID :many
DELETE FROM access
WHERE organization_id = $1
RETURNING id, organization_id, organization_name, user_id, role_id, create_time, update_time
`

func (q *Queries) DeleteAccessByOrganizationID(ctx context.Context, organizationID int32) ([]Access, error) {
	rows, err := q.db.QueryContext(ctx, deleteAccessByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Access
	for rows.Next() {
		var i Access
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.UserID,
			&i.RoleID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteAccessByOrganizationIDAndUserID = `-- name: DeleteAccessByOrganizationIDAndUserID :many
DELETE FROM access
WHERE organization_id = $1 and user_id = $2
RETURNING id, organization_id, organization_name, user_id, role_id, create_time, update_time
`

type DeleteAccessByOrganizationIDAndUserIDParams struct {
	OrganizationID int32
	UserID         int32
}

func (q *Queries) DeleteAccessByOrganizationIDAndUserID(ctx context.Context, arg DeleteAccessByOrganizationIDAndUserIDParams) ([]Access, error) {
	rows, err := q.db.QueryContext(ctx, deleteAccessByOrganizationIDAndUserID, arg.OrganizationID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Access
	for rows.Next() {
		var i Access
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.UserID,
			&i.RoleID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccess = `-- name: GetAccess :one
SELECT id, organization_id, organization_name, user_id, role_id, create_time, update_time FROM access WHERE id = $1
`

func (q *Queries) GetAccess(ctx context.Context, id int32) (Access, error) {
	row := q.db.QueryRowContext(ctx, getAccess, id)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OrganizationName,
		&i.UserID,
		&i.RoleID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getAccessByOrganizationID = `-- name: GetAccessByOrganizationID :many
SELECT id, organization_id, organization_name, user_id, role_id, create_time, update_time FROM access WHERE organization_id = $1
`

func (q *Queries) GetAccessByOrganizationID(ctx context.Context, organizationID int32) ([]Access, error) {
	rows, err := q.db.QueryContext(ctx, getAccessByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Access
	for rows.Next() {
		var i Access
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.UserID,
			&i.RoleID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccessByOrganizationNameAndUserID = `-- name: GetAccessByOrganizationNameAndUserID :one
SELECT id, organization_id, organization_name, user_id, role_id, create_time, update_time FROM access WHERE organization_name = $1 and user_id = $2
`

type GetAccessByOrganizationNameAndUserIDParams struct {
	OrganizationName string
	UserID           int32
}

func (q *Queries) GetAccessByOrganizationNameAndUserID(ctx context.Context, arg GetAccessByOrganizationNameAndUserIDParams) (Access, error) {
	row := q.db.QueryRowContext(ctx, getAccessByOrganizationNameAndUserID, arg.OrganizationName, arg.UserID)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OrganizationName,
		&i.UserID,
		&i.RoleID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getAccessByUserID = `-- name: GetAccessByUserID :many
SELECT id, organization_id, organization_name, user_id, role_id, create_time, update_time FROM access WHERE user_id = $1
`

func (q *Queries) GetAccessByUserID(ctx context.Context, userID int32) ([]Access, error) {
	rows, err := q.db.QueryContext(ctx, getAccessByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Access
	for rows.Next() {
		var i Access
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.UserID,
			&i.RoleID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccesses = `-- name: GetAccesses :many
SELECT id, organization_id, organization_name, user_id, role_id, create_time, update_time FROM access
`

func (q *Queries) GetAccesses(ctx context.Context) ([]Access, error) {
	rows, err := q.db.QueryContext(ctx, getAccesses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Access
	for rows.Next() {
		var i Access
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.UserID,
			&i.RoleID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccess = `-- name: UpdateAccess :one
UPDATE access SET role_id = $2
WHERE id = $1
RETURNING id, organization_id, organization_name, user_id, role_id, create_time, update_time
`

type UpdateAccessParams struct {
	ID     int32
	RoleID int32
}

func (q *Queries) UpdateAccess(ctx context.Context, arg UpdateAccessParams) (Access, error) {
	row := q.db.QueryRowContext(ctx, updateAccess, arg.ID, arg.RoleID)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.OrganizationName,
		&i.UserID,
		&i.RoleID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}
