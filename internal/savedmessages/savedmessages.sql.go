// Code generated by sqlc. DO NOT EDIT.
// source: savedmessages.sql

package savedmessages

import (
	"context"
)

const addSavedMessage = `-- name: AddSavedMessage :one
INSERT INTO saved_messages (
  message,
  ing_account_id,
  writer_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, message, ing_account_id, writer_id, create_time, update_time
`

type AddSavedMessageParams struct {
	Message      string
	IngAccountID int32
	WriterID     int32
}

func (q *Queries) AddSavedMessage(ctx context.Context, arg AddSavedMessageParams) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, addSavedMessage, arg.Message, arg.IngAccountID, arg.WriterID)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.IngAccountID,
		&i.WriterID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteSavedMessage = `-- name: DeleteSavedMessage :one
DELETE FROM saved_messages
WHERE id = $1
RETURNING id, message, ing_account_id, writer_id, create_time, update_time
`

func (q *Queries) DeleteSavedMessage(ctx context.Context, id int32) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, deleteSavedMessage, id)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.IngAccountID,
		&i.WriterID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSavedMessage = `-- name: GetSavedMessage :one
SELECT id, message, ing_account_id, writer_id, create_time, update_time FROM saved_messages WHERE id = $1
`

func (q *Queries) GetSavedMessage(ctx context.Context, id int32) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, getSavedMessage, id)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.IngAccountID,
		&i.WriterID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getSavedMessageByIngAccountID = `-- name: GetSavedMessageByIngAccountID :many
SELECT id, message, ing_account_id, writer_id, create_time, update_time FROM saved_messages WHERE ing_account_id = $1
`

func (q *Queries) GetSavedMessageByIngAccountID(ctx context.Context, ingAccountID int32) ([]SavedMessage, error) {
	rows, err := q.db.QueryContext(ctx, getSavedMessageByIngAccountID, ingAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedMessage
	for rows.Next() {
		var i SavedMessage
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.IngAccountID,
			&i.WriterID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSavedMessageByWriterID = `-- name: GetSavedMessageByWriterID :many
SELECT id, message, ing_account_id, writer_id, create_time, update_time FROM saved_messages WHERE writer_id = $1
`

func (q *Queries) GetSavedMessageByWriterID(ctx context.Context, writerID int32) ([]SavedMessage, error) {
	rows, err := q.db.QueryContext(ctx, getSavedMessageByWriterID, writerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedMessage
	for rows.Next() {
		var i SavedMessage
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.IngAccountID,
			&i.WriterID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSavedMessages = `-- name: GetSavedMessages :many
SELECT id, message, ing_account_id, writer_id, create_time, update_time FROM saved_messages
`

func (q *Queries) GetSavedMessages(ctx context.Context) ([]SavedMessage, error) {
	rows, err := q.db.QueryContext(ctx, getSavedMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedMessage
	for rows.Next() {
		var i SavedMessage
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.IngAccountID,
			&i.WriterID,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSavedMessageMessage = `-- name: UpdateSavedMessageMessage :one
UPDATE saved_messages SET message = $2
WHERE id = $1
RETURNING id, message, ing_account_id, writer_id, create_time, update_time
`

type UpdateSavedMessageMessageParams struct {
	ID      int32
	Message string
}

func (q *Queries) UpdateSavedMessageMessage(ctx context.Context, arg UpdateSavedMessageMessageParams) (SavedMessage, error) {
	row := q.db.QueryRowContext(ctx, updateSavedMessageMessage, arg.ID, arg.Message)
	var i SavedMessage
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.IngAccountID,
		&i.WriterID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}
