// Code generated by sqlc. DO NOT EDIT.
// source: role.sql

package roles

import (
	"context"
)

const addRole = `-- name: AddRole :one
INSERT INTO roles (
    organization_id,
    creator_id,
    role_type
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, organization_id, creator_id, role_type, create_time, update_time
`

type AddRoleParams struct {
	OrganizationID int32
	CreatorID      int32
	RoleType       int32
}

func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, addRole, arg.OrganizationID, arg.CreatorID, arg.RoleType)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreatorID,
		&i.RoleType,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :one
DELETE FROM roles
WHERE id = $1
RETURNING id, organization_id, creator_id, role_type, create_time, update_time
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, deleteRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreatorID,
		&i.RoleType,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, organization_id, creator_id, role_type, create_time, update_time FROM roles WHERE id = $1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreatorID,
		&i.RoleType,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getRoleByCreatorID = `-- name: GetRoleByCreatorID :many
SELECT id, organization_id, creator_id, role_type, create_time, update_time FROM roles WHERE creator_id = $1
`

func (q *Queries) GetRoleByCreatorID(ctx context.Context, creatorID int32) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoleByCreatorID, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreatorID,
			&i.RoleType,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByOrganizationID = `-- name: GetRoleByOrganizationID :many
SELECT id, organization_id, creator_id, role_type, create_time, update_time FROM roles WHERE organization_id = $1
`

func (q *Queries) GetRoleByOrganizationID(ctx context.Context, organizationID int32) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoleByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreatorID,
			&i.RoleType,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT id, organization_id, creator_id, role_type, create_time, update_time FROM roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.CreatorID,
			&i.RoleType,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
